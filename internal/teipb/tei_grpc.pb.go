// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tei.proto

package teipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Info_Info_FullMethodName = "/tei.v1.Info/Info"
)

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Info_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tei.v1.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Info_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tei.proto",
}

const (
	Embed_Embed_FullMethodName = "/tei.v1.Embed/Embed"
)

// EmbedClient is the client API for Embed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbedClient interface {
	Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error)
}

type embedClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbedClient(cc grpc.ClientConnInterface) EmbedClient {
	return &embedClient{cc}
}

func (c *embedClient) Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error) {
	out := new(EmbedResponse)
	err := c.cc.Invoke(ctx, Embed_Embed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbedServer is the server API for Embed service.
// All implementations must embed UnimplementedEmbedServer
// for forward compatibility
type EmbedServer interface {
	Embed(context.Context, *EmbedRequest) (*EmbedResponse, error)
	mustEmbedUnimplementedEmbedServer()
}

// UnimplementedEmbedServer must be embedded to have forward compatible implementations.
type UnimplementedEmbedServer struct {
}

func (UnimplementedEmbedServer) Embed(context.Context, *EmbedRequest) (*EmbedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embed not implemented")
}
func (UnimplementedEmbedServer) mustEmbedUnimplementedEmbedServer() {}

// UnsafeEmbedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbedServer will
// result in compilation errors.
type UnsafeEmbedServer interface {
	mustEmbedUnimplementedEmbedServer()
}

func RegisterEmbedServer(s grpc.ServiceRegistrar, srv EmbedServer) {
	s.RegisterService(&Embed_ServiceDesc, srv)
}

func _Embed_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embed_Embed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedServer).Embed(ctx, req.(*EmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Embed_ServiceDesc is the grpc.ServiceDesc for Embed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Embed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tei.v1.Embed",
	HandlerType: (*EmbedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Embed",
			Handler:    _Embed_Embed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tei.proto",
}

const (
	Tokenize_Tokenize_FullMethodName = "/tei.v1.Tokenize/Tokenize"
)

// TokenizeClient is the client API for Tokenize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenizeClient interface {
	Tokenize(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeResponse, error)
}

type tokenizeClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenizeClient(cc grpc.ClientConnInterface) TokenizeClient {
	return &tokenizeClient{cc}
}

func (c *tokenizeClient) Tokenize(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeResponse, error) {
	out := new(EncodeResponse)
	err := c.cc.Invoke(ctx, Tokenize_Tokenize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenizeServer is the server API for Tokenize service.
// All implementations must embed UnimplementedTokenizeServer
// for forward compatibility
type TokenizeServer interface {
	Tokenize(context.Context, *EncodeRequest) (*EncodeResponse, error)
	mustEmbedUnimplementedTokenizeServer()
}

// UnimplementedTokenizeServer must be embedded to have forward compatible implementations.
type UnimplementedTokenizeServer struct {
}

func (UnimplementedTokenizeServer) Tokenize(context.Context, *EncodeRequest) (*EncodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}
func (UnimplementedTokenizeServer) mustEmbedUnimplementedTokenizeServer() {}

// UnsafeTokenizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenizeServer will
// result in compilation errors.
type UnsafeTokenizeServer interface {
	mustEmbedUnimplementedTokenizeServer()
}

func RegisterTokenizeServer(s grpc.ServiceRegistrar, srv TokenizeServer) {
	s.RegisterService(&Tokenize_ServiceDesc, srv)
}

func _Tokenize_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenizeServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tokenize_Tokenize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenizeServer).Tokenize(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokenize_ServiceDesc is the grpc.ServiceDesc for Tokenize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tei.v1.Tokenize",
	HandlerType: (*TokenizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _Tokenize_Tokenize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tei.proto",
}
